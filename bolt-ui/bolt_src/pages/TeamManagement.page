<div class="team-management-page">
  <div class="page-header">
    <h2 class="page-title">Gestione Squadra</h2>
    <div class="page-actions">
      <button class="button button-secondary schedule-training-btn">
        üèÉ Pianifica Allenamento
      </button>
      <button class="button button-primary advance-day-btn">
        ‚è© Avanza Giorno
      </button>
    </div>
  </div>
  
  <!-- Team Overview Section -->
  <div class="team-overview-section">
    <div id="teamOverviewContainer"></div>
  </div>
  
  <!-- Player Filters Section -->
  <div class="player-filters-section">
    <div id="playerSearchContainer"></div>
  </div>
  
  <!-- Players Grid Section -->
  <div class="players-grid-section">
    <div class="section-header">
      <h3>Rosa Giocatori</h3>
      <div class="section-controls">
        <select id="positionFilter" class="filter-select" aria-label="Filtra per posizione">
          <option value="">Tutte le posizioni</option>
          <option value="GK">Portieri</option>
          <option value="DF">Difensori</option>
          <option value="MF">Centrocampisti</option>
          <option value="FW">Attaccanti</option>
        </select>
        <select id="sortPlayers" class="sort-select" aria-label="Ordina giocatori">
          <option value="name">Nome</option>
          <option value="rating">Rating</option>
          <option value="age">Et√†</option>
          <option value="morale">Morale</option>
          <option value="fitness">Forma</option>
        </select>
      </div>
    </div>
    
    <div id="playersGridContainer" class="players-grid"></div>
    
    <div id="loadingPlayers" class="loading-state" style="display: none;">
      <div class="loading-spinner"></div>
      <span>Caricamento giocatori...</span>
    </div>
    
    <div id="emptyPlayersState" class="empty-state" style="display: none;">
      <div class="empty-icon">üë•</div>
      <h4>Nessun giocatore trovato</h4>
      <p>Prova a modificare i filtri di ricerca</p>
    </div>
  </div>
  
  <!-- Player Detail Modal (will be populated dynamically) -->
  <div id="playerDetailModal" class="modal" role="dialog" aria-modal="true" style="display: none;">
    <div class="modal-overlay"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="playerDetailTitle" class="modal-title">Dettagli Giocatore</h2>
        <button class="modal-close-btn" aria-label="Chiudi dettagli">‚úï</button>
      </div>
      <div class="modal-body" id="playerDetailContent">
        <!-- Player details will be populated here -->
      </div>
      <div class="modal-footer">
        <div class="modal-actions">
          <button class="button button-ghost" id="closePlayerDetailBtn">Chiudi</button>
          <button class="button button-secondary" id="trainPlayerBtn">üèÉ Allena</button>
          <button class="button button-primary" id="transferOfferBtn">üí∞ Offerta</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Sponsor Banner -->
  <div id="sponsorBannerContainer" class="sponsor-banner-container"></div>
</div>

<script>
class TeamManagementPage {
  constructor() {
    this.players = [];
    this.filteredPlayers = [];
    this.teamData = null;
    this.selectedPlayer = null;
    this.currentFilters = {
      position: '',
      search: ''
    };
    this.currentSort = {
      field: 'name',
      direction: 'asc'
    };
    
    this.init();
  }
  
  async init() {
    this.bindEvents();
    await this.loadData();
    this.renderComponents();
  }
  
  bindEvents() {
    // Position filter
    document.getElementById('positionFilter').addEventListener('change', (e) => {
      this.currentFilters.position = e.target.value;
      this.applyFilters();
    });
    
    // Sort select
    document.getElementById('sortPlayers').addEventListener('change', (e) => {
      this.currentSort.field = e.target.value;
      this.applySorting();
    });
    
    // Modal close button
    document.querySelector('.modal-close-btn').addEventListener('click', () => {
      this.closePlayerDetail();
    });
    
    document.getElementById('closePlayerDetailBtn').addEventListener('click', () => {
      this.closePlayerDetail();
    });
    
    // Train player button
    document.getElementById('trainPlayerBtn').addEventListener('click', () => {
      if (this.selectedPlayer) {
        this.trainPlayer(this.selectedPlayer.id);
      }
    });
    
    // Transfer offer button
    document.getElementById('transferOfferBtn').addEventListener('click', () => {
      if (this.selectedPlayer) {
        this.initiateTransfer(this.selectedPlayer.id);
      }
    });
    
    // Schedule training button
    document.querySelector('.schedule-training-btn').addEventListener('click', () => {
      this.navigateToTraining();
    });
    
    // Advance day button
    document.querySelector('.advance-day-btn').addEventListener('click', () => {
      this.advanceDay();
    });
    
    // Listen for player search events
    document.addEventListener('playerSearch', (e) => {
      this.currentFilters.search = e.detail.filters.search || '';
      this.applyFilters();
    });
  }
  
  async loadData() {
    this.showLoading(true);
    
    try {
      // In a real app, these would be actual API calls to the bolt-core flows
      const [playersData, teamData, moraleData] = await Promise.all([
        this.fetchPlayers(),
        this.fetchTeamData(),
        this.fetchMoraleData()
      ]);
      
      this.players = this.mergePlayerData(playersData, moraleData);
      this.filteredPlayers = [...this.players];
      this.teamData = teamData;
      
      this.showLoading(false);
    } catch (error) {
      console.error('Error loading data:', error);
      this.showError('Errore nel caricamento dei dati');
      this.showLoading(false);
    }
  }
  
  async fetchPlayers() {
    // In a real app, this would call a bolt-core flow
    // For now, we'll return mock data
    return [
      {
        id: 1,
        name: 'Mario Rossi',
        age: 25,
        position: 'FW',
        overall_rating: 85,
        fitness: 95,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 2,
        name: 'Luigi Bianchi',
        age: 28,
        position: 'MF',
        overall_rating: 82,
        fitness: 88,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 3,
        name: 'Giuseppe Verdi',
        age: 30,
        position: 'DF',
        overall_rating: 80,
        fitness: 92,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 4,
        name: 'Antonio Neri',
        age: 22,
        position: 'GK',
        overall_rating: 78,
        fitness: 90,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 5,
        name: 'Franco Blu',
        age: 24,
        position: 'MF',
        overall_rating: 79,
        fitness: 85,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 6,
        name: 'Paolo Gialli',
        age: 26,
        position: 'DF',
        overall_rating: 81,
        fitness: 87,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      }
    ];
  }
  
  async fetchTeamData() {
    // In a real app, this would call a bolt-core flow
    return {
      team: {
        name: 'AC Milan',
        logo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=160&h=160',
        league: 'Serie A',
        position: 1
      },
      stats: {
        matches_played: 15,
        wins: 10,
        draws: 3,
        losses: 2,
        average_morale: 75,
        average_fitness: 85,
        tactical_effectiveness: 80
      },
      budget: {
        available: 50000000,
        wages: 2000000
      }
    };
  }
  
  async fetchMoraleData() {
    // In a real app, this would call a bolt-core flow
    return {
      1: { morale: 85, injury_status: 'healthy' },
      2: { morale: 75, injury_status: 'healthy' },
      3: { morale: 80, injury_status: 'healthy' },
      4: { morale: 90, injury_status: 'healthy' },
      5: { morale: 70, injury_status: 'minor_injury' },
      6: { morale: 85, injury_status: 'healthy' }
    };
  }
  
  mergePlayerData(players, moraleData) {
    return players.map(player => {
      const playerMorale = moraleData[player.id] || { morale: 70, injury_status: 'healthy' };
      return {
        ...player,
        morale: playerMorale.morale,
        injury_status: playerMorale.injury_status
      };
    });
  }
  
  renderComponents() {
    this.renderTeamOverview();
    this.renderPlayerSearch();
    this.renderPlayersGrid();
    this.renderSponsorBanner();
  }
  
  renderTeamOverview() {
    const container = document.getElementById('teamOverviewContainer');
    
    // Create team overview card element
    const teamOverviewCard = document.createElement('div');
    teamOverviewCard.className = 'team-overview card';
    teamOverviewCard.dataset.teamData = JSON.stringify(this.teamData);
    
    // In a real app, we would use the actual TeamOverview component
    // For now, we'll create a placeholder that looks like the component
    container.appendChild(teamOverviewCard);
    
    // Initialize the component
    new TeamOverview(teamOverviewCard, this.teamData);
  }
  
  renderPlayerSearch() {
    const container = document.getElementById('playerSearchContainer');
    
    // Create player search bar element
    const playerSearchBar = document.createElement('div');
    playerSearchBar.className = 'player-search-bar';
    
    // In a real app, we would use the actual PlayerSearchBar component
    container.appendChild(playerSearchBar);
    
    // Initialize the component
    new PlayerSearchBar(playerSearchBar, {
      autoSearch: true
    });
  }
  
  renderPlayersGrid() {
    const container = document.getElementById('playersGridContainer');
    container.innerHTML = '';
    
    if (this.filteredPlayers.length === 0) {
      document.getElementById('emptyPlayersState').style.display = 'flex';
      return;
    }
    
    document.getElementById('emptyPlayersState').style.display = 'none';
    
    // Create player cards
    this.filteredPlayers.forEach(player => {
      const playerCard = document.createElement('div');
      playerCard.className = 'player-card card';
      playerCard.dataset.playerData = JSON.stringify({ player });
      
      // In a real app, we would use the actual PlayerCard component
      container.appendChild(playerCard);
      
      // Initialize the component
      new PlayerCard(playerCard, { player });
      
      // Add click event to show player details
      playerCard.addEventListener('click', () => {
        this.showPlayerDetail(player);
      });
    });
  }
  
  renderSponsorBanner() {
    const container = document.getElementById('sponsorBannerContainer');
    
    // Create sponsor banner element
    const sponsorBanner = document.createElement('div');
    sponsorBanner.className = 'sponsor-banner';
    
    // In a real app, we would use the actual SponsorBanner component
    container.appendChild(sponsorBanner);
    
    // Initialize the component with sample sponsor data
    const sponsorData = {
      id: 1,
      name: 'SportTech Pro',
      description: 'Attrezzature sportive di alta qualit√† per professionisti e appassionati',
      logo: 'https://images.pexels.com/photos/1667088/pexels-photo-1667088.jpeg?auto=compress&cs=tinysrgb&w=200&h=200',
      cta: 'Scopri di pi√π',
      url: 'https://example.com/sponsor1',
      theme: 'premium'
    };
    
    new SponsorBanner(sponsorBanner, {
      sponsorData,
      autoClose: true,
      duration: 10000
    });
  }
  
  applyFilters() {
    this.filteredPlayers = this.players.filter(player => {
      // Position filter
      if (this.currentFilters.position && player.position !== this.currentFilters.position) {
        return false;
      }
      
      // Search filter
      if (this.currentFilters.search) {
        const searchTerm = this.currentFilters.search.toLowerCase();
        if (!player.name.toLowerCase().includes(searchTerm)) {
          return false;
        }
      }
      
      return true;
    });
    
    this.applySorting();
  }
  
  applySorting() {
    this.filteredPlayers.sort((a, b) => {
      let aValue = a[this.currentSort.field];
      let bValue = b[this.currentSort.field];
      
      // Handle string sorting
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }
      
      let result = 0;
      if (aValue < bValue) result = -1;
      if (aValue > bValue) result = 1;
      
      return this.currentSort.direction === 'desc' ? -result : result;
    });
    
    this.renderPlayersGrid();
  }
  
  showPlayerDetail(player) {
    this.selectedPlayer = player;
    
    // Update modal title
    document.getElementById('playerDetailTitle').textContent = player.name;
    
    // Create player detail content
    const detailContent = document.getElementById('playerDetailContent');
    detailContent.innerHTML = '';
    
    // Create player detail elements
    const playerDetail = document.createElement('div');
    playerDetail.className = 'player-detail';
    
    // Basic info section
    const basicInfo = document.createElement('div');
    basicInfo.className = 'player-basic-info';
    basicInfo.innerHTML = `
      <div class="player-avatar-large">
        <img src="${player.photo}" alt="Foto di ${player.name}" class="player-photo-large">
      </div>
      <div class="player-info-large">
        <h3 class="player-name-large">${player.name}</h3>
        <div class="player-meta-large">
          <span class="player-position-large">${player.position}</span>
          <span class="player-age-large">${player.age} anni</span>
        </div>
        <div class="player-rating-large">
          <span class="rating-label">Rating</span>
          <span class="rating-value">${player.overall_rating}</span>
        </div>
      </div>
    `;
    
    // Status section
    const statusSection = document.createElement('div');
    statusSection.className = 'player-status-section';
    
    // Create morale indicator
    const moraleIndicator = document.createElement('div');
    moraleIndicator.className = 'morale-indicator';
    moraleIndicator.dataset.morale = player.morale;
    
    // Create injury status badge
    const injuryBadge = document.createElement('div');
    injuryBadge.className = 'injury-status-badge';
    injuryBadge.dataset.status = player.injury_status;
    
    statusSection.appendChild(moraleIndicator);
    statusSection.appendChild(injuryBadge);
    
    // Attributes section
    const attributesSection = document.createElement('div');
    attributesSection.className = 'player-attributes-section';
    attributesSection.innerHTML = `
      <h4>Attributi</h4>
      <div class="attributes-grid">
        <div class="attribute-item">
          <span class="attribute-name">Velocit√†</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
        <div class="attribute-item">
          <span class="attribute-name">Tiro</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
        <div class="attribute-item">
          <span class="attribute-name">Passaggio</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
        <div class="attribute-item">
          <span class="attribute-name">Dribbling</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
        <div class="attribute-item">
          <span class="attribute-name">Difesa</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
        <div class="attribute-item">
          <span class="attribute-name">Fisico</span>
          <div class="attribute-bar">
            <div class="attribute-fill" style="width: ${70 + Math.random() * 20}%"></div>
          </div>
          <span class="attribute-value">${Math.floor(70 + Math.random() * 20)}</span>
        </div>
      </div>
    `;
    
    // Stats section
    const statsSection = document.createElement('div');
    statsSection.className = 'player-stats-section';
    statsSection.innerHTML = `
      <h4>Statistiche Stagionali</h4>
      <div class="stats-grid">
        <div class="stat-item">
          <span class="stat-value">${Math.floor(Math.random() * 20)}</span>
          <span class="stat-label">Presenze</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">${Math.floor(Math.random() * 10)}</span>
          <span class="stat-label">Gol</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">${Math.floor(Math.random() * 8)}</span>
          <span class="stat-label">Assist</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">${(6 + Math.random() * 2).toFixed(1)}</span>
          <span class="stat-label">Rating Medio</span>
        </div>
      </div>
    `;
    
    // Append all sections
    playerDetail.appendChild(basicInfo);
    playerDetail.appendChild(statusSection);
    playerDetail.appendChild(attributesSection);
    playerDetail.appendChild(statsSection);
    
    detailContent.appendChild(playerDetail);
    
    // Initialize components
    new MoraleIndicator(moraleIndicator, {
      animated: true,
      showDescription: true
    });
    
    new InjuryStatusBadge(injuryBadge, {
      showProgress: true,
      showDetails: true
    });
    
    // Show modal
    document.getElementById('playerDetailModal').style.display = 'flex';
  }
  
  closePlayerDetail() {
    document.getElementById('playerDetailModal').style.display = 'none';
    this.selectedPlayer = null;
  }
  
  trainPlayer(playerId) {
    // In a real app, this would call the Player_Train flow
    console.log(`Training player ${playerId}`);
    
    // Show success message
    this.showSuccess('Allenamento programmato');
    
    // Close modal
    this.closePlayerDetail();
    
    // Navigate to training page
    this.navigateToTraining();
  }
  
  initiateTransfer(playerId) {
    // In a real app, this would call the Transfer_Offer flow
    console.log(`Initiating transfer for player ${playerId}`);
    
    // Show transfer modal
    const player = this.players.find(p => p.id === playerId);
    if (player) {
      // In a real app, this would show the NegotiationModal component
      window.showNegotiationModal(player);
    }
    
    // Close player detail modal
    this.closePlayerDetail();
  }
  
  navigateToTraining() {
    // In a real app, this would navigate to the training page
    window.location.hash = '#training';
  }
  
  advanceDay() {
    // In a real app, this would call the GameFlow_AdvanceDay flow
    console.log('Advancing day');
    
    // Show confirmation dialog
    if (confirm('Sei sicuro di voler avanzare al giorno successivo?')) {
      // Show success message
      this.showSuccess('Avanzato al giorno successivo');
      
      // Reload data
      this.loadData();
    }
  }
  
  showLoading(show) {
    document.getElementById('loadingPlayers').style.display = show ? 'flex' : 'none';
    document.getElementById('playersGridContainer').style.display = show ? 'none' : 'grid';
  }
  
  showSuccess(message) {
    // In a real app, this would use a toast component
    window.dispatchEvent(new CustomEvent('showToast', {
      detail: { message, type: 'success' }
    }));
  }
  
  showError(message) {
    // In a real app, this would use a toast component
    window.dispatchEvent(new CustomEvent('showToast', {
      detail: { message, type: 'error' }
    }));
  }
}

// Initialize the page
document.addEventListener('DOMContentLoaded', () => {
  new TeamManagementPage();
});
</script>