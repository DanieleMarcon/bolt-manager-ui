<div class="training-management-page">
  <div class="page-header">
    <h2 class="page-title">Gestione Allenamenti</h2>
    <div class="page-actions">
      <button class="button button-secondary view-progress-btn">
        üìä Visualizza Progressi
      </button>
      <button class="button button-primary advance-day-btn">
        ‚è© Avanza Giorno
      </button>
    </div>
  </div>
  
  <!-- Training Schedule Section -->
  <div class="training-schedule-section">
    <div class="section-header">
      <h3>Pianificazione Settimanale</h3>
    </div>
    
    <div id="trainingSchedulerContainer"></div>
  </div>
  
  <!-- Training Setup Section -->
  <div class="training-setup-section">
    <div class="section-header">
      <h3>Configura Allenamento</h3>
    </div>
    
    <div class="setup-grid">
      <div class="training-type-column">
        <div class="column-header">
          <h4>Tipo di Allenamento</h4>
        </div>
        
        <div id="trainingTypesContainer" class="training-types-grid">
          <!-- Training type cards will be populated here -->
        </div>
      </div>
      
      <div class="training-config-column">
        <div class="column-header">
          <h4>Configurazione</h4>
        </div>
        
        <div class="config-panel">
          <div id="intensitySliderContainer"></div>
          
          <div class="training-options">
            <div class="option-group">
              <label for="trainingDuration" class="option-label">Durata</label>
              <select id="trainingDuration" class="option-select">
                <option value="60">60 minuti</option>
                <option value="90" selected>90 minuti</option>
                <option value="120">120 minuti</option>
              </select>
            </div>
            
            <div class="option-group">
              <label for="trainingFocus" class="option-label">Focus</label>
              <select id="trainingFocus" class="option-select">
                <option value="all">Generale</option>
                <option value="starters">Titolari</option>
                <option value="reserves">Riserve</option>
                <option value="youth">Giovani</option>
              </select>
            </div>
          </div>
          
          <div class="staff-assignment">
            <h5>Staff Assegnato</h5>
            <div id="staffSelectorContainer"></div>
          </div>
        </div>
      </div>
      
      <div class="player-selection-column">
        <div class="column-header">
          <h4>Selezione Giocatori</h4>
        </div>
        
        <div id="playerSelectionContainer"></div>
      </div>
    </div>
  </div>
  
  <!-- Training Progress Section -->
  <div class="training-progress-section">
    <div class="section-header">
      <h3>Progressi Recenti</h3>
      <button class="button button-ghost view-all-btn">
        Vedi Tutti
      </button>
    </div>
    
    <div id="progressChartContainer"></div>
  </div>
  
  <!-- Training Results Modal (will be shown after training) -->
  <div id="trainingResultsModalContainer"></div>
  
  <!-- Sponsor Banner -->
  <div id="sponsorBannerContainer" class="sponsor-banner-container"></div>
</div>

<script>
class TrainingManagementPage {
  constructor() {
    this.players = [];
    this.staff = [];
    this.trainingTypes = [];
    this.selectedTrainingType = null;
    this.selectedPlayers = [];
    this.selectedStaff = null;
    this.trainingIntensity = 3;
    this.trainingDuration = 90;
    this.trainingFocus = 'all';
    this.progressData = [];
    
    this.init();
  }
  
  async init() {
    this.bindEvents();
    await this.loadData();
    this.renderComponents();
  }
  
  bindEvents() {
    // Training duration select
    document.getElementById('trainingDuration').addEventListener('change', (e) => {
      this.trainingDuration = parseInt(e.target.value);
    });
    
    // Training focus select
    document.getElementById('trainingFocus').addEventListener('change', (e) => {
      this.trainingFocus = e.target.value;
    });
    
    // View progress button
    document.querySelector('.view-progress-btn').addEventListener('click', () => {
      this.viewAllProgress();
    });
    
    // Advance day button
    document.querySelector('.advance-day-btn').addEventListener('click', () => {
      this.advanceDay();
    });
    
    // View all progress button
    document.querySelector('.view-all-btn').addEventListener('click', () => {
      this.viewAllProgress();
    });
    
    // Listen for training type selection
    document.addEventListener('trainingTypeSelected', (e) => {
      this.handleTrainingTypeSelected(e.detail.trainingType);
    });
    
    // Listen for player selection changes
    document.addEventListener('selectionChange', (e) => {
      this.selectedPlayers = e.detail.selectedIds;
    });
    
    // Listen for intensity changes
    document.addEventListener('intensityChange', (e) => {
      this.trainingIntensity = e.detail.value;
    });
    
    // Listen for staff selection
    document.addEventListener('staffSelected', (e) => {
      this.selectedStaff = e.detail.staffId;
    });
    
    // Listen for training scheduled
    document.addEventListener('sessionAdded', (e) => {
      this.handleTrainingScheduled(e.detail);
    });
  }
  
  async loadData() {
    try {
      // In a real app, these would be actual API calls to the bolt-core flows
      const [playersData, staffData, trainingTypesData, progressData] = await Promise.all([
        this.fetchPlayers(),
        this.fetchStaff(),
        this.fetchTrainingTypes(),
        this.fetchProgressData()
      ]);
      
      this.players = playersData;
      this.staff = staffData;
      this.trainingTypes = trainingTypesData;
      this.progressData = progressData;
    } catch (error) {
      console.error('Error loading data:', error);
      this.showError('Errore nel caricamento dei dati');
    }
  }
  
  async fetchPlayers() {
    // In a real app, this would call a bolt-core flow
    // For now, we'll return mock data
    return [
      {
        id: 1,
        name: 'Mario Rossi',
        age: 25,
        position: 'FW',
        overall_rating: 85,
        fitness: 95,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 2,
        name: 'Luigi Bianchi',
        age: 28,
        position: 'MF',
        overall_rating: 82,
        fitness: 88,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 3,
        name: 'Giuseppe Verdi',
        age: 30,
        position: 'DF',
        overall_rating: 80,
        fitness: 92,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 4,
        name: 'Antonio Neri',
        age: 22,
        position: 'GK',
        overall_rating: 78,
        fitness: 90,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 5,
        name: 'Franco Blu',
        age: 24,
        position: 'MF',
        overall_rating: 79,
        fitness: 85,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 6,
        name: 'Paolo Gialli',
        age: 26,
        position: 'DF',
        overall_rating: 81,
        fitness: 87,
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      }
    ];
  }
  
  async fetchStaff() {
    // In a real app, this would call a bolt-core flow
    return [
      {
        id: 1,
        name: 'Marco Rossi',
        role: 'Allenatore',
        rating: 82,
        attributes: {
          coaching: 85,
          fitness: 70,
          tactical: 80,
          mental: 75
        },
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      },
      {
        id: 2,
        name: 'Luigi Bianchi',
        role: 'Preparatore Atletico',
        rating: 78,
        attributes: {
          coaching: 65,
          fitness: 85,
          tactical: 60,
          mental: 70
        },
        photo: 'https://images.pexels.com/photos/114296/pexels-photo-114296.jpeg?auto=compress&cs=tinysrgb&w=120&h=120'
      }
    ];
  }
  
  async fetchTrainingTypes() {
    // In a real app, this would call a bolt-core flow
    return [
      {
        id: 'fitness',
        name: 'Allenamento Fisico',
        category: 'Preparazione Fisica',
        description: 'Migliora la resistenza, velocit√† e forza fisica dei giocatori',
        duration: '90 min',
        injury_risk: 3,
        recommended_intensity: 4,
        attributes_improved: ['pace', 'physical'],
        role_effectiveness: {
          GK: 6,
          DF: 8,
          MF: 9,
          FW: 8
        },
        requirements: ['field', 'equipment']
      },
      {
        id: 'technical',
        name: 'Allenamento Tecnico',
        category: 'Abilit√† Tecniche',
        description: 'Sviluppa le abilit√† tecniche individuali come tiro, passaggio e dribbling',
        duration: '75 min',
        injury_risk: 1,
        recommended_intensity: 3,
        attributes_improved: ['shooting', 'passing', 'dribbling'],
        role_effectiveness: {
          GK: 4,
          DF: 6,
          MF: 9,
          FW: 10
        },
        requirements: ['field', 'coach']
      },
      {
        id: 'tactical',
        name: 'Allenamento Tattico',
        category: 'Preparazione Tattica',
        description: 'Migliora la comprensione tattica e il posizionamento in campo',
        duration: '60 min',
        injury_risk: 1,
        recommended_intensity: 2,
        attributes_improved: ['tactical', 'mental'],
        role_effectiveness: {
          GK: 7,
          DF: 9,
          MF: 10,
          FW: 8
        },
        requirements: ['field', 'coach']
      }
    ];
  }
  
  async fetchProgressData() {
    // In a real app, this would call a bolt-core flow
    const now = new Date();
    const data = [];
    
    // Generate sample progress data for the last 30 days
    for (let i = 30; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      
      const entry = {
        date: date.toISOString().split('T')[0],
        timestamp: date.getTime(),
        attributes: {}
      };
      
      // Generate realistic attribute progression
      const attributes = ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physical'];
      attributes.forEach(attr => {
        const baseValue = 60 + Math.random() * 20; // Base 60-80
        const progression = Math.sin(i / 30) * 5; // Gradual improvement
        const noise = (Math.random() - 0.5) * 2; // Small random variations
        entry.attributes[attr] = Math.max(0, Math.min(100, baseValue + progression + noise));
      });
      
      data.push(entry);
    }
    
    return data;
  }
  
  renderComponents() {
    this.renderTrainingScheduler();
    this.renderTrainingTypes();
    this.renderIntensitySlider();
    this.renderStaffSelector();
    this.renderPlayerSelection();
    this.renderProgressChart();
    this.renderTrainingResultsModal();
    this.renderSponsorBanner();
  }
  
  renderTrainingScheduler() {
    const container = document.getElementById('trainingSchedulerContainer');
    
    // Create training scheduler element
    const trainingScheduler = document.createElement('div');
    trainingScheduler.className = 'training-scheduler';
    
    // In a real app, we would use the actual TrainingScheduler component
    container.appendChild(trainingScheduler);
    
    // Initialize the component
    new TrainingScheduler(trainingScheduler, {
      autoSave: true
    });
  }
  
  renderTrainingTypes() {
    const container = document.getElementById('trainingTypesContainer');
    container.innerHTML = '';
    
    // Create training type cards
    this.trainingTypes.forEach(type => {
      const typeCard = document.createElement('div');
      typeCard.className = 'training-type-card';
      typeCard.dataset.trainingType = JSON.stringify(type);
      
      // In a real app, we would use the actual TrainingTypeCard component
      container.appendChild(typeCard);
      
      // Initialize the component
      new TrainingTypeCard(typeCard, type);
    });
  }
  
  renderIntensitySlider() {
    const container = document.getElementById('intensitySliderContainer');
    
    // Create intensity slider element
    const intensitySlider = document.createElement('div');
    intensitySlider.className = 'intensity-slider';
    
    // In a real app, we would use the actual IntensitySlider component
    container.appendChild(intensitySlider);
    
    // Initialize the component
    new IntensitySlider(intensitySlider, {
      defaultValue: 3,
      showEffects: true
    });
  }
  
  renderStaffSelector() {
    const container = document.getElementById('staffSelectorContainer');
    
    // Create staff selector dropdown
    const staffSelector = document.createElement('div');
    staffSelector.className = 'player-selector-dropdown';
    staffSelector.dataset.options = JSON.stringify({
      label: 'Allenatore',
      players: this.staff,
      showPreview: true
    });
    
    // In a real app, we would use the actual PlayerSelectorDropdown component
    container.appendChild(staffSelector);
    
    // Initialize the component
    new PlayerSelectorDropdown(staffSelector, {
      label: 'Allenatore',
      players: this.staff,
      showPreview: true
    });
  }
  
  renderPlayerSelection() {
    const container = document.getElementById('playerSelectionContainer');
    
    // Create player selection list
    const playerSelectionList = document.createElement('div');
    playerSelectionList.className = 'player-selection-list';
    playerSelectionList.dataset.options = JSON.stringify({
      multiSelect: true,
      maxSelections: 11,
      minSelections: 1,
      showFilters: true,
      showSummary: true
    });
    
    // In a real app, we would use the actual PlayerSelectionList component
    container.appendChild(playerSelectionList);
    
    // Initialize the component
    new PlayerSelectionList(playerSelectionList, {
      multiSelect: true,
      maxSelections: 11,
      minSelections: 1,
      showFilters: true,
      showSummary: true
    });
  }
  
  renderProgressChart() {
    const container = document.getElementById('progressChartContainer');
    
    // Create progress chart element
    const progressChart = document.createElement('div');
    progressChart.className = 'progress-chart';
    progressChart.dataset.options = JSON.stringify({
      attributes: ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physical'],
      timeRange: 30,
      showGrid: true,
      showTooltips: true,
      showInsights: true
    });
    
    // In a real app, we would use the actual ProgressChart component
    container.appendChild(progressChart);
    
    // Initialize the component
    new ProgressChart(progressChart, {
      attributes: ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physical'],
      timeRange: 30,
      showGrid: true,
      showTooltips: true,
      showInsights: true,
      data: this.progressData
    });
  }
  
  renderTrainingResultsModal() {
    const container = document.getElementById('trainingResultsModalContainer');
    
    // Create training results modal
    const trainingResultsModal = document.createElement('div');
    trainingResultsModal.className = 'training-results-modal modal';
    trainingResultsModal.dataset.options = JSON.stringify({
      autoShow: false,
      showAnimations: true
    });
    
    // In a real app, we would use the actual TrainingResultsModal component
    container.appendChild(trainingResultsModal);
    
    // Initialize the component
    new TrainingResultsModal(trainingResultsModal, {
      autoShow: false,
      showAnimations: true
    });
  }
  
  renderSponsorBanner() {
    const container = document.getElementById('sponsorBannerContainer');
    
    // Create sponsor banner element
    const sponsorBanner = document.createElement('div');
    sponsorBanner.className = 'sponsor-banner';
    
    // In a real app, we would use the actual SponsorBanner component
    container.appendChild(sponsorBanner);
    
    // Initialize the component with sample sponsor data
    const sponsorData = {
      id: 2,
      name: 'Energy Boost',
      description: 'La bevanda energetica ufficiale dei campioni di calcio',
      logo: 'https://images.pexels.com/photos/2529148/pexels-photo-2529148.jpeg?auto=compress&cs=tinysrgb&w=200&h=200',
      cta: 'Prova ora',
      url: 'https://example.com/sponsor2',
      theme: 'featured'
    };
    
    new SponsorBanner(sponsorBanner, {
      sponsorData,
      autoClose: true,
      duration: 10000
    });
  }
  
  handleTrainingTypeSelected(trainingType) {
    this.selectedTrainingType = trainingType;
    console.log('Selected training type:', trainingType);
  }
  
  handleTrainingScheduled(trainingData) {
    console.log('Training scheduled:', trainingData);
    
    // Show success message
    this.showSuccess('Allenamento programmato con successo');
    
    // In a real app, this would call the Player_Train flow
    // and then show the training results
    setTimeout(() => {
      this.showTrainingResults(trainingData);
    }, 1000);
  }
  
  showTrainingResults(trainingData) {
    // Generate mock training results
    const results = {
      overall_effectiveness: 75 + Math.random() * 15,
      player_results: this.selectedPlayers.map(playerId => {
        const player = this.players.find(p => p.id === playerId);
        if (!player) return null;
        
        const overallImprovement = 1 + Math.random() * 3;
        
        return {
          player,
          overall_improvement: overallImprovement,
          attribute_improvements: {
            pace: (Math.random() - 0.3) * 2,
            shooting: (Math.random() - 0.3) * 2,
            passing: (Math.random() - 0.3) * 2,
            dribbling: (Math.random() - 0.3) * 2,
            defending: (Math.random() - 0.3) * 2,
            physical: (Math.random() - 0.3) * 2
          }
        };
      }).filter(Boolean),
      injuries: Math.random() > 0.8 ? [
        {
          player: this.players[Math.floor(Math.random() * this.players.length)],
          type: 'Distorsione alla caviglia',
          severity: 3,
          estimated_recovery: 7
        }
      ] : [],
      injury_risk: this.trainingIntensity / 10
    };
    
    // Show training results modal
    window.showTrainingResults({
      type: this.selectedTrainingType.id,
      name: this.selectedTrainingType.name,
      description: this.selectedTrainingType.description,
      intensity: this.trainingIntensity,
      duration: `${this.trainingDuration} min`,
      participants: this.selectedPlayers.length,
      date: new Date().toISOString()
    }, results);
  }
  
  viewAllProgress() {
    // In a real app, this would navigate to the player history page
    window.location.hash = '#history';
  }
  
  advanceDay() {
    // In a real app, this would call the GameFlow_AdvanceDay flow
    console.log('Advancing day');
    
    // Show confirmation dialog
    if (confirm('Sei sicuro di voler avanzare al giorno successivo?')) {
      // Show success message
      this.showSuccess('Avanzato al giorno successivo');
      
      // Reload data
      this.loadData().then(() => {
        this.renderComponents();
      });
    }
  }
  
  showSuccess(message) {
    // In a real app, this would use a toast component
    window.dispatchEvent(new CustomEvent('showToast', {
      detail: { message, type: 'success' }
    }));
  }
  
  showError(message) {
    // In a real app, this would use a toast component
    window.dispatchEvent(new CustomEvent('showToast', {
      detail: { message, type: 'error' }
    }));
  }
}

// Initialize the page
document.addEventListener('DOMContentLoaded', () => {
  new TrainingManagementPage();
});
</script>